//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EXFIN
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EXAMEN_FINALEntities : DbContext
    {
        public EXAMEN_FINALEntities()
            : base("name=EXAMEN_FINALEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<COMPRA> COMPRA { get; set; }
        public virtual DbSet<PRODUCTO> PRODUCTO { get; set; }
        public virtual DbSet<PROVEEDOR> PROVEEDOR { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<VENTA> VENTA { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_COMPRA_Result> SP_COMPRA(Nullable<int> iD, Nullable<int> iD_PRODUCTO, Nullable<int> iD_PROVEEDOR, Nullable<int> pRECIO, Nullable<int> cANTIDAD, string oPTIONS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iD_PRODUCTOParameter = iD_PRODUCTO.HasValue ?
                new ObjectParameter("ID_PRODUCTO", iD_PRODUCTO) :
                new ObjectParameter("ID_PRODUCTO", typeof(int));
    
            var iD_PROVEEDORParameter = iD_PROVEEDOR.HasValue ?
                new ObjectParameter("ID_PROVEEDOR", iD_PROVEEDOR) :
                new ObjectParameter("ID_PROVEEDOR", typeof(int));
    
            var pRECIOParameter = pRECIO.HasValue ?
                new ObjectParameter("PRECIO", pRECIO) :
                new ObjectParameter("PRECIO", typeof(int));
    
            var cANTIDADParameter = cANTIDAD.HasValue ?
                new ObjectParameter("CANTIDAD", cANTIDAD) :
                new ObjectParameter("CANTIDAD", typeof(int));
    
            var oPTIONSParameter = oPTIONS != null ?
                new ObjectParameter("OPTIONS", oPTIONS) :
                new ObjectParameter("OPTIONS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_COMPRA_Result>("SP_COMPRA", iDParameter, iD_PRODUCTOParameter, iD_PROVEEDORParameter, pRECIOParameter, cANTIDADParameter, oPTIONSParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_PRODUCTO_Result> SP_PRODUCTO(Nullable<int> iD, string nOMBRE, Nullable<int> cANTIDAD, Nullable<int> sTOCK, Nullable<int> iD_PROVEEDOR, string eSTADO, string oPTIONS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var cANTIDADParameter = cANTIDAD.HasValue ?
                new ObjectParameter("CANTIDAD", cANTIDAD) :
                new ObjectParameter("CANTIDAD", typeof(int));
    
            var sTOCKParameter = sTOCK.HasValue ?
                new ObjectParameter("STOCK", sTOCK) :
                new ObjectParameter("STOCK", typeof(int));
    
            var iD_PROVEEDORParameter = iD_PROVEEDOR.HasValue ?
                new ObjectParameter("ID_PROVEEDOR", iD_PROVEEDOR) :
                new ObjectParameter("ID_PROVEEDOR", typeof(int));
    
            var eSTADOParameter = eSTADO != null ?
                new ObjectParameter("ESTADO", eSTADO) :
                new ObjectParameter("ESTADO", typeof(string));
    
            var oPTIONSParameter = oPTIONS != null ?
                new ObjectParameter("OPTIONS", oPTIONS) :
                new ObjectParameter("OPTIONS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRODUCTO_Result>("SP_PRODUCTO", iDParameter, nOMBREParameter, cANTIDADParameter, sTOCKParameter, iD_PROVEEDORParameter, eSTADOParameter, oPTIONSParameter);
        }
    
        public virtual ObjectResult<SP_PROVEEDOR_Result> SP_PROVEEDOR(Nullable<int> iD, string nOMBRE, string eSTADO, string oPTIONS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var eSTADOParameter = eSTADO != null ?
                new ObjectParameter("ESTADO", eSTADO) :
                new ObjectParameter("ESTADO", typeof(string));
    
            var oPTIONSParameter = oPTIONS != null ?
                new ObjectParameter("OPTIONS", oPTIONS) :
                new ObjectParameter("OPTIONS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PROVEEDOR_Result>("SP_PROVEEDOR", iDParameter, nOMBREParameter, eSTADOParameter, oPTIONSParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_VENTA_Result> SP_VENTA(Nullable<int> iD, Nullable<int> iD_PRODUCTO, Nullable<int> iD_PROVEEDOR, Nullable<int> pRECIO, Nullable<int> cANTIDAD, string oPTIONS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iD_PRODUCTOParameter = iD_PRODUCTO.HasValue ?
                new ObjectParameter("ID_PRODUCTO", iD_PRODUCTO) :
                new ObjectParameter("ID_PRODUCTO", typeof(int));
    
            var iD_PROVEEDORParameter = iD_PROVEEDOR.HasValue ?
                new ObjectParameter("ID_PROVEEDOR", iD_PROVEEDOR) :
                new ObjectParameter("ID_PROVEEDOR", typeof(int));
    
            var pRECIOParameter = pRECIO.HasValue ?
                new ObjectParameter("PRECIO", pRECIO) :
                new ObjectParameter("PRECIO", typeof(int));
    
            var cANTIDADParameter = cANTIDAD.HasValue ?
                new ObjectParameter("CANTIDAD", cANTIDAD) :
                new ObjectParameter("CANTIDAD", typeof(int));
    
            var oPTIONSParameter = oPTIONS != null ?
                new ObjectParameter("OPTIONS", oPTIONS) :
                new ObjectParameter("OPTIONS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VENTA_Result>("SP_VENTA", iDParameter, iD_PRODUCTOParameter, iD_PROVEEDORParameter, pRECIOParameter, cANTIDADParameter, oPTIONSParameter);
        }

        public System.Data.Entity.DbSet<EXFIN.Models.ProductosClass> ProductosClasses { get; set; }

        public System.Data.Entity.DbSet<EXFIN.Models.ProveedoresClass> ProveedoresClasses { get; set; }
    }
}
